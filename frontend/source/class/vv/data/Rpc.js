/* ************************************************************************
   Copyright: 2009 OETIKER+PARTNER AG 
   License:   GPLv3 or later
   Authors:   Tobi Oetiker <tobi@oetiker.ch>
   Utf8Check: äöü

************************************************************************ */

/**
 * initialize us an Rpc object with some extra thrills.
 */
qx.Class.define('vv.data.Rpc', {
    extend : qx.io.remote.Rpc,
    type : "singleton",

    construct : function() {
        this.base(arguments);

        this.set({
            timeout     : 15000,
            url         : 'jsonrpc',
            serviceName : 'VV'
        });
    },

    members : {
        /**
         * A variant of the asyncCall method which pops up error messages
         * generated by the server automatically.
         * 
         * Note that the handler method only gets a return value never an exception
         * It just does not get called when there is an exception.
         *
         * @param handler {Function} the callback function.
         * @return {var} the method call reference.
         */
        callAsyncSmart : function(handler) {
            var origArguments = arguments;
            var origThis = this;
            var origHandler = handler;

            var superHandler = function(ret, exc, id) {
                if (exc) {
                    if (exc.code == 3978) {
                        var pop = vv.page.Associate.getInstance();

                        pop.addListenerOnce('associated', function() {
                            origArguments.callee.apply(origThis, origArguments);
                        });

                        pop.show();
                    }
                    else {
                        vv.popup.MsgBox.getInstance().exc(exc);
                    }
                }
                else {
                    origHandler(ret);
                }
            };

            arguments[0] = superHandler;
            this.callAsync.apply(this, arguments);
        }
    }
});